1. Instalar o typescript
npm i typescript --save-dev

2. Iniciar um projeto typescript.
npx tsc --init 

3. Descomentar
"incremental": true -> Compila somente o que foi mudado.
"outDir": "./dist" -> O código compilado vai ser gerado em uma pasta dist.

4. Vai compilar o que está na pasta src.
"include": [
    "src/**/*.ts"
]

5. npm i -D jest @types/jest ts-node --save-dev

6. SWC é um compilador feito em Rust que consegue transpilar mais rapidamente 
todo o código para javascript, fazendo o teste rodar mais rapidamente.
npm i -D @swc/jest @swc/cli @swc/core

7. Inicialização do Jest:
npx jest --init
Perguntas:
Would you like to use Jest when running "test" script in "package.json"? … yes
Would you like to use Typescript for the configuration file? … yes
Choose the test environment that will be used for testing › node
Do you want Jest to add coverage reports? … no
Which provider should be used to instrument code for coverage? › v8
Automatically clear mock calls, instances, contexts and results before every test? … yes

8. Adicionar configuração no arquivo jest.config.ts 
Essa configuração pega todos os arquivos ts, js, tsx ou jsx e uso o swc/jest para rodar 
os testes.
transform: {
    "^.+\.(t|j)sx?$": ["@swc/jest"],
},

9. Como o SWC não faz checagem da sintaxe do Typescript, precisamos adicionar
essa verificação para que erros de sintaxe não passem pelos nossos testes. Para isso
vamos usar o TSC que está dentro de node_modules/.bin/tsc com o seguinte comando:
node_modules/.bin/tsc --noEmit
OBS1: com a flag --noEmit o tsc vai fazer a checagem dos tipos e sintaxe do Typescript porém
não vai compilar nem gerar arquivos convertidos para javascript.
OBS2: Por padrão o Node não consegue entender o "import" e outras coisas usadas 
pelo typescript então precisamos converter o código para Javascript com o 
tsc(typescript conversor).
Então para termos uma segurança de que nossos testes estão realmente passando sem 
falhas, vamos adicionar no script de testes o comando: node_modules/.bin/tsc --noEmit.
Logo o resultado final do script de teste no package.json vai ser:

"node_modules/.bin/tsc --noEmit && jest"

10. Para deixarmos mais bonito o script podemos criar um novo script que vai chamar 
o modulo tsc, vamos chamá-lo de typescriptconvert:
"typescriptconvert": "tsc"
e mudamos o script de "node_modules/.bin/tsc --noEmit && jest" para:
"npm run typescriptconvert -- --noEmit && jest"

11. Como também estamos usando o plugin "test runner" no VSCode, que faz com que possamos 
rodar cada teste individualmente, também precisamos fazer a checagem da sintaxe do typescript
quando rodarmos o teste usando esse plugin. Para isso vamos em:
1. Ir em file -> preferences -> settings
2. Clicar em workspace. Para que essa alteração seja refletida apenas nesse projeto e não para
o usuário todo.
3. Digitar "jest", procurar por "Jest Command" e colocar "npm test" para o "Jest Command".  

12. Para instalar o sequelize:
npm install sequelize reflect-metadata sequelize-typescript

13. Instalar o sqlite:
npm install sqlite3

14. Para o Typescript não reclamar do uso dos Decorators dizendo que ainda é algo
experimental, tempos que descomentar no tsconfing.json as seguintes propriedades:
"experimentalDecorators": true,    
"emitDecoratorMetadata": true,
"strictNullChecks": false, // Essa por padrão vem true, então devemos descomentar e 
trocar para false.
Para o teste funcionar com decorator precisamos configurar também o arquivo .swcrc.

15. npm i express @types/express dotenv nodemon

16. npm i -D supertest @types/supertest -> Essa biblioteca vai ajudar a fazer os testes 
e2e, pois ele vai conseguir chamar a instância do express.   

17. npm i yup

18. npm i jstoxml

19. npm i -D @types/jstoxml